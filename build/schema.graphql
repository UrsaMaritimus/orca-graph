type Stablecoin @entity {
  #AVAI address
  id: ID!

  #ERC20 properties
  symbol: String!
  name: String!
  decimals: BigInt!

  # bankCounts
  bankCount: Int!

  # Amount of circulating AVAI
  totalSupply: BigInt!

  paused: Boolean!

  #derived fields
  banks: [Bank!]! @derivedFrom(field: "stablecoin")
}

type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  price: TokenPrice!

  #derived fields
  banks: [Bank!]! @derivedFrom(field: "token")
}

type TokenPrice @entity {
  # symbol name
  id: ID!
  priceUSD: BigInt!
}

type Bank @entity {
  # address
  id: ID!

  # Contract data
  minimumCollateralPercentage: BigInt!
  debtCeiling: BigInt!
  closingFee: BigInt!
  openingFee: BigInt!
  tokenPeg: BigInt!
  totalDebt: BigInt! # In base token
  # Liquidation values
  debtRatio: BigInt!
  gainRatio: BigInt!

  token: Token!
  stablecoin: Stablecoin!

  #Total values
  totalCollateral: BigInt!

  # Number of vaults made
  vaultCount: Int!

  treasury: BigInt!

  #derived fields
  vaults: [Vault!]! @derivedFrom(field: "bank")
}

type Vault @entity {
  # is vault ID
  id: ID!

  collateral: BigInt!

  debt: BigInt!

  bank: Bank!
  user: User!
}

type User @entity {
  # user address
  id: ID!
  balanceStable: BigInt!

  #derived fields
  vaults: [Vault!] @derivedFrom(field: "user")
  liquidations: [Liquidation!] @derivedFrom(field: "user")
  pools: [PoolUser!] @derivedFrom(field: "user")
}

type Liquidation @entity {
  # user + owed
  id: ID!
  user: User!
  token: Token!
  owed: BigInt!
}

type Exchange @entity {
  # contract address
  id: ID!
  usdHeld: BigInt!
  treasury: BigInt!
  mintingFee: BigInt!
  redeemingFee: BigInt!
}

type PodLeader @entity {
  # cotnract address
  id: ID!
  treasury: Bytes!
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  orca: Bytes!
  orcaPerSec: BigInt!
  totalAllocPoints: BigInt!
  poolCount: BigInt!

  #derived fields
  pools: [Pool!]! @derivedFrom(field: "leader")
}

type Pool @entity {
  # pid
  id: ID!
  leader: PodLeader!
  pair: Bytes!
  allocPoint: BigInt!
  lastRewardTimestamp: BigInt!
  totalStaked: BigInt!
  depositFee: BigInt!
  userCount: BigInt!
  treasuryAmount: BigInt!

  #derived fields
  users: [PoolUser!]! @derivedFrom(field: "pool")
}

type PoolUser @entity {
  id: ID! # Set to `${user.id}-${pool.id}`
  pool: Pool!
  user: User!
  staked: BigInt!
  lastTimestamp: BigInt!
}
